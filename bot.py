import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(row_width=1)
btn_section1 = InlineKeyboardButton("–†–∞–∑–¥–µ–ª 1", callback_data="section1")
btn_section2 = InlineKeyboardButton("–†–∞–∑–¥–µ–ª 2", callback_data="section2")
main_menu.add(btn_section1, btn_section2)

# –ü–æ–¥–º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤
def get_submenu(section):
    submenu = InlineKeyboardMarkup(row_width=1)
    submenu.add(
        InlineKeyboardButton("–ü–æ–¥–ø—É–Ω–∫—Ç 1", callback_data=f"{section}_sub1"),
        InlineKeyboardButton("–ü–æ–¥–ø—É–Ω–∫—Ç 2", callback_data=f"{section}_sub2"),
        InlineKeyboardButton("–ü–æ–¥–ø—É–Ω–∫—Ç 3", callback_data=f"{section}_sub3"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )
    return submenu

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤
subsections = {
    "section1_sub1": ("https://via.placeholder.com/400", "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑–¥–µ–ª–∞ 1 - –ü–æ–¥–ø—É–Ω–∫—Ç 1"),
    "section1_sub2": ("https://via.placeholder.com/400", "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑–¥–µ–ª–∞ 1 - –ü–æ–¥–ø—É–Ω–∫—Ç 2"),
    "section1_sub3": ("https://via.placeholder.com/400", "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑–¥–µ–ª–∞ 1 - –ü–æ–¥–ø—É–Ω–∫—Ç 3"),
    "section2_sub1": ("https://via.placeholder.com/400", "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑–¥–µ–ª–∞ 2 - –ü–æ–¥–ø—É–Ω–∫—Ç 1"),
    "section2_sub2": ("https://via.placeholder.com/400", "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑–¥–µ–ª–∞ 2 - –ü–æ–¥–ø—É–Ω–∫—Ç 2"),
    "section2_sub3": ("https://via.placeholder.com/400", "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –†–∞–∑–¥–µ–ª–∞ 2 - –ü–æ–¥–ø—É–Ω–∫—Ç 3"),
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã
@dp.callback_query_handler(lambda c: c.data in ["section1", "section2"])
async def open_section(callback_query: types.CallbackQuery):
    section = callback_query.data
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø—É–Ω–∫—Ç:",
                                reply_markup=get_submenu(section))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–æ–¥–ø—É–Ω–∫—Ç—ã
@dp.callback_query_handler(lambda c: c.data in subsections)
async def send_subsection(callback_query: types.CallbackQuery):
    img_url, text = subsections[callback_query.data]
    submenu = get_submenu(callback_query.data.split("_")[0])
    
    await bot.send_photo(chat_id=callback_query.message.chat.id, photo=img_url, caption=text, reply_markup=submenu)
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(Text(equals="back"))
async def go_back(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                                reply_markup=main_menu)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
